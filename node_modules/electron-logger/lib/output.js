// Generated by CoffeeScript 1.9.2
(function() {
  var Output, Readable, Writable, colors, fs, merge, path, stream;

  fs = require('fs');

  path = require('path');

  stream = require('stream');

  colors = require('colors');

  merge = require('merge');

  Readable = stream.Readable;

  Writable = stream.Writable;

  Output = (function() {
    function Output() {}

    Output.prototype.setDest = function(config) {
      var files, ws;
      if (this.config === void 0) {
        this.config = config;
      } else {
        merge(this.config, config);
      }
      this.rs || (this.rs = new Readable({
        objectMode: true
      }));
      this.rs._read = function() {};
      this.ws || (this.ws = []);
      files = this.config.file;
      if (files) {
        if (typeof files === "string") {
          ws = fs.createWriteStream(path.resolve(files), {
            flags: 'a',
            encoding: "utf8"
          });
          this.rs.pipe(ws);
          return this.ws.push(ws);
        } else if (typeof files === "array") {
          return files.forEach(function(ele, index, array) {
            ws = fs.createWriteStream(path.resolve(ele), {
              flags: 'a',
              encoding: "utf8"
            });
            this.rs.pipe(ws);
            return this.ws.push(ws);
          });
        }
      }
    };

    Output.prototype._outputToTerminal = function(content, color) {
      if (this.config.terminal === true) {
        if (color) {
          process.stdout.write(colors[color](content));
        } else {
          process.stdout.write(content);
        }
        return process.stdout.write('\n\r');
      }
    };

    Output.prototype._outputToTerminaln = function(content, color) {
      if (this.config.terminal === true) {
        if (color) {
          return process.stdout.write(colors[color](content));
        } else {
          return process.stdout.write(content);
        }
      }
    };

    Output.prototype.log = function(content, color) {
      this._outputToTerminal(content, color);
      this.rs.push(content);
      return this.rs.push('\n\r');
    };

    Output.prototype.logn = function(content, color1) {
      this.color = color1;
      this._outputToTerminaln(content, color);
      return this.rs.push(content);
    };

    return Output;

  })();

  module.exports = new Output();

}).call(this);
